from django.views import View
from django.http import JsonResponse
from django.views.decorators.csrf import csrf_exempt
from django.utils.decorators import method_decorator
from django.shortcuts import get_object_or_404
import json
from api.models import Answer, Question, UserInformation, VoteForAnswer, ReputationPermission
from django.contrib.auth.models import User  # Import User model t·ª´ auth ƒë·ªÉ l·∫•y username
from api.views.auth.authHelper import get_authenticated_user
from django.utils.timezone import now
import logging
import traceback
from django.core.exceptions import PermissionDenied
from api.views.student.student_forum.student_question.student_detailquestion import check_permission_and_update_reputation
logger = logging.getLogger(__name__)
@method_decorator(csrf_exempt, name='dispatch')
class AdminAnsQuestionView(View):
    def dispatch(self, *args, **kwargs):
        return super().dispatch(*args, **kwargs)
    
    def post(self, request, *args, **kwargs):
        try:
            # üì• Parse d·ªØ li·ªáu JSON
            data = json.loads(request.body.decode('utf-8'))
            print("üì• D·ªÆ LI·ªÜU NH·∫¨N V·ªÄ:", data)
        except json.JSONDecodeError as e:
            print("‚ùå JSON l·ªói:", str(e))
            return JsonResponse({'error': 'D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá'}, status=400)

        # üéØ L·∫•y th√¥ng tin ƒë·∫ßu v√†o
        question_id = data.get('question_id')
        user_id = data.get('user_id')
        content = data.get('content')
        if not all([question_id, user_id, content]):
            return JsonResponse({'error': 'Thi·∫øu d·ªØ li·ªáu ƒë·∫ßu v√†o'}, status=400)

        # üîç L·∫•y Question v√† UserInformation
        try:
            question = get_object_or_404(Question, id=question_id)
            user_info = get_object_or_404(UserInformation, user_id=user_id)
        except Exception as e:
            print("‚ùå Kh√¥ng t√¨m th·∫•y Question ho·∫∑c User:", str(e))
            return JsonResponse(
                {'error': 'Kh√¥ng t√¨m th·∫•y Question ho·∫∑c User'},
                status=400
            )

        # ‚úÖ Ki·ªÉm tra quy·ªÅn v√† ƒëi·ªÉm uy t√≠n
        try:
            check_permission_and_update_reputation(user_info, "post_answer")
        except PermissionDenied as pd:
            # N·∫øu kh√¥ng ƒë·ªß quy·ªÅn => tr·∫£ l·ªói r√µ r√†ng
            return JsonResponse(
                {'error': str(pd)},
                status=403
            )

        # üí¨ T·∫°o c√¢u tr·∫£ l·ªùi
        try:
            answer = Answer.objects.create(
                question=question,
                user=user_info,
                content=content
            )
        except Exception as e:
            print("‚ùå L·ªói t·∫°o Answer:", str(e))
            return JsonResponse(
                {'error': 'L·ªói khi l∆∞u c√¢u tr·∫£ l·ªùi!'},
                status=500
            )

        # üéâ Th√†nh c√¥ng
        return JsonResponse(
            {'message': '‚úÖ Tr·∫£ l·ªùi th√†nh c√¥ng!', 'id': answer.id},
            status=201
        )

    def delete(self, request, answer_id=None, *args, **kwargs):
        # 1. Ki·ªÉm tra answer_id c√≥ ƒë∆∞·ª£c truy·ªÅn v√†o kh√¥ng
        if not answer_id:
            return JsonResponse({'error': 'Thi·∫øu ID c·ªßa c√¢u tr·∫£ l·ªùi'}, status=400)

        try:
            # 2. L·∫•y object Answer
            answer = get_object_or_404(Answer, id=answer_id)

            # ‚ùå Kh√¥ng ki·ªÉm tra ng∆∞·ªùi d√πng n·ªØa (admin c√≥ th·ªÉ xo√° b·∫•t k·ª≥ c√¢u tr·∫£ l·ªùi n√†o)

            # 3. Xo√° t·∫•t c·∫£ votes li√™n quan ƒë·∫øn c√¢u tr·∫£ l·ªùi n√†y
            VoteForAnswer.objects.filter(answer=answer).delete()

            # 4. Xo√° c√¢u tr·∫£ l·ªùi
            answer.delete()

            return JsonResponse(
                {'message': '‚úÖ ƒê√£ xo√° c√¢u tr·∫£ l·ªùi th√†nh c√¥ng!'}, status=200
            )

        except Exception as e:
            print("‚ùå Exception khi xo√° c√¢u tr·∫£ l·ªùi:", e)
            traceback.print_exc()
            return JsonResponse({'error': f'‚ùå L·ªói khi xo√°: {str(e)}'}, status=500)

        
    def get(self, request, *args, **kwargs):
        question_id = request.GET.get('question_id')
        if not question_id:
            print("‚ö†Ô∏è Thi·∫øu question_id trong request")
            return JsonResponse({'error': 'Thi·∫øu question_id'}, status=400)

        try:
            # L·∫•y question (c√≥ th·ªÉ b·ªè l·ªçc is_approve n·∫øu mu·ªën l·∫•y c·∫£ ch∆∞a duy·ªát)
            question = Question.objects.filter(id=question_id).first()
            if not question:
                print(f"‚ùå C√¢u h·ªèi {question_id} kh√¥ng t·ªìn t·∫°i ho·∫∑c ch∆∞a ƒë∆∞·ª£c duy·ªát")
                return JsonResponse({'error': 'C√¢u h·ªèi kh√¥ng t·ªìn t·∫°i ho·∫∑c ch∆∞a ƒë∆∞·ª£c duy·ªát'}, status=404)

            # L·∫•y danh s√°ch answer (c·∫£ ƒë√£ duy·ªát v√† ch∆∞a duy·ªát n·∫øu c·∫ßn)
            answers = Answer.objects.filter(
                question_id=question_id
            ).order_by('-created_at')
            print(f"‚úÖ T√¨m th·∫•y {answers.count()} c√¢u tr·∫£ l·ªùi ƒë√£ cho question_id {question_id}")

            user = request.user if request.user.is_authenticated else None
            answer_list = []

            for ans in answers:
                print(f"\nüìå X·ª≠ l√Ω Answer ID: {ans.id}")
                try:
                    user_info = ans.user  # FK t·ªõi UserInformation
                    full_name = getattr(user_info, 'full_name', None)
                    username = None
                    if user_info.user_id:
                        auth_user = User.objects.filter(id=user_info.user_id).first()
                        username = auth_user.username if auth_user else None
                    username = username or full_name or "Ng∆∞·ªùi d√πng ·∫©n danh"
                    print(f"üßæ username: {username}")
                except Exception as e:
                    print(f"‚ö†Ô∏è L·ªói khi l·∫•y th√¥ng tin ng∆∞·ªùi d√πng cho Answer ID {ans.id}: {e}")
                    username = "Ng∆∞·ªùi d√πng ·∫©n danh"

                # üî¢ T√≠nh t·ªïng s·ªë like/dislike
                likes = VoteForAnswer.objects.filter(answer=ans, vote_type='like').count()
                dislikes = VoteForAnswer.objects.filter(answer=ans, vote_type='dislike').count()
                total_votes = likes - dislikes
                print(f"üëç Likes: {likes}, üëé Dislikes: {dislikes}, üìä TotalVotes: {total_votes}")

                # üë§ Ki·ªÉm tra user hi·ªán t·∫°i ƒë√£ vote ch∆∞a
                user_vote = None
                if user:
                    vote = VoteForAnswer.objects.filter(user=user, answer=ans).first()
                    if vote:
                        user_vote = vote.vote_type
                print(f"üë§ userVote: {user_vote}")

                answer_list.append({
                    'id': ans.id,
                    'username': username,
                    'content': ans.content,
                    'created_at': ans.created_at.strftime('%Y-%m-%d %H:%M:%S'),
                    'userVote': user_vote,
                    'totalVote': total_votes,
                    'like': likes,
                    'dislike': dislikes,
                    'user_id': user_info.user_id if user_info else None,
                    'question_id': ans.question_id,
                    'is_approve': ans.is_approve  # ‚úÖ Th√™m v√†o ƒë√¢y
                })
                print(f"‚úÖ D·ªØ li·ªáu answer ƒë∆∞·ª£c append.")

            return JsonResponse({'answers': answer_list}, status=200)

        except Exception as e:
            print("‚ùå L·ªói khi l·∫•y danh s√°ch c√¢u tr·∫£ l·ªùi:", e)
            return JsonResponse({'error': 'Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu'}, status=500)


        
    def put(self, request, answer_id):
        logger.info(f"Received PUT request with answer_id: {answer_id}")
        
        try:
            answer = Answer.objects.get(id=answer_id)
            answer.is_approve = 1
            answer.save()

            logger.info(f"‚úÖ Answer {answer_id} has been approved.")
            return JsonResponse({"message": "Ph√™ duy·ªát c√¢u tr·∫£ l·ªùi th√†nh c√¥ng!"}, status=200)

        except Answer.DoesNotExist:
            return JsonResponse({"error": "C√¢u tr·∫£ l·ªùi kh√¥ng t·ªìn t·∫°i!"}, status=404)
        except Exception as e:
            logger.error(f"L·ªói kh√¥ng x√°c ƒë·ªãnh: {str(e)}")
            logger.error(traceback.format_exc())
            return JsonResponse({"error": "ƒê√£ x·∫£y ra l·ªói khi ph√™ duy·ªát c√¢u tr·∫£ l·ªùi."}, status=500)