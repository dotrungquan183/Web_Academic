from django.views import View
from django.http import JsonResponse
from django.views.decorators.csrf import csrf_exempt
from django.utils.decorators import method_decorator
from django.shortcuts import get_object_or_404
import json
from api.models import Answer, Question, UserInformation, Vote
from django.contrib.auth.models import User  # Import User model t·ª´ auth ƒë·ªÉ l·∫•y username
from api.views.auth.authHelper import get_authenticated_user
from django.utils.timezone import now
import logging
import traceback
from django.db import transaction, IntegrityError
from rest_framework.response import Response
from rest_framework import status

logger = logging.getLogger(__name__)
@method_decorator(csrf_exempt, name='dispatch')
class StudentAnsQuestionView(View):
    def dispatch(self, *args, **kwargs):
        return super().dispatch(*args, **kwargs)
    
    def post(self, request, *args, **kwargs):
        try:
            data = json.loads(request.body.decode('utf-8'))
            print("üì• D·ªÆ LI·ªÜU NH·∫¨N V·ªÄ:", data)
        except Exception as e:
            print("‚ùå JSON l·ªói:", str(e))
            return JsonResponse({'error': 'D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá'}, status=400)

        question_id = data.get('question_id')
        user_id = data.get('user_id')
        content = data.get('content')

        if not all([question_id, user_id, content]):
            return JsonResponse({'error': 'Thi·∫øu d·ªØ li·ªáu ƒë·∫ßu v√†o'}, status=400)

        try:
            question = get_object_or_404(Question, id=question_id)
            user = get_object_or_404(UserInformation, user_id=user_id)
        except Exception as e:
            print("‚ùå Kh√¥ng t√¨m th·∫•y Question ho·∫∑c User:", str(e))
            return JsonResponse({'error': 'Kh√¥ng t√¨m th·∫•y Question ho·∫∑c User'}, status=400)

        # T·∫°o c√¢u tr·∫£ l·ªùi
        answer = Answer.objects.create(
            question=question,
            user=user,
            content=content
        )

        return JsonResponse({'message': 'Success', 'id': answer.id}, status=201)


    def delete(self, request, answer_id=None, *args, **kwargs):
        # 1. L·∫•y user t·ª´ JWT
        user, error_response = get_authenticated_user(request)
        if error_response:
            return error_response

        # 2. Ki·ªÉm tra answer_id c√≥ ƒë∆∞·ª£c truy·ªÅn v√†o kh√¥ng
        if not answer_id:
            return JsonResponse({'error': 'Thi·∫øu ID c·ªßa c√¢u tr·∫£ l·ªùi'}, status=400)

        try:
            # 3. L·∫•y object Answer
            answer = get_object_or_404(Answer, id=answer_id)

            # 4. Ki·ªÉm tra quy·ªÅn: ch·ªâ ng∆∞·ªùi t·∫°o m·ªõi ƒë∆∞·ª£c xo√°
            # So s√°nh user.id v·ªõi answer.user.user_id (do answer.user l√† FK ƒë·∫øn UserInformation)
            if answer.user.user_id != user.id:  # S·ª≠ d·ª•ng user_id c·ªßa UserInformation
                return JsonResponse({'error': '‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn xo√° c√¢u tr·∫£ l·ªùi n√†y'}, status=403)

            # 5. Xo√° t·∫•t c·∫£ votes li√™n quan ƒë·∫øn c√¢u tr·∫£ l·ªùi n√†y
            Vote.objects.filter(vote_for='answer', content_id=answer.id).delete()

            # 6. Xo√° c√¢u tr·∫£ l·ªùi
            answer.delete()

            return JsonResponse({'message': '‚úÖ ƒê√£ xo√° c√¢u tr·∫£ l·ªùi th√†nh c√¥ng!'}, status=200)

        except Exception as e:
            print("‚ùå Exception khi xo√° c√¢u tr·∫£ l·ªùi:")
            traceback.print_exc()
            return JsonResponse({'error': f'‚ùå L·ªói khi xo√°: {str(e)}'}, status=500)
        
    def get(self, request, *args, **kwargs):
        question_id = request.GET.get('question_id')

        if not question_id:
            print("‚ö†Ô∏è Thi·∫øu question_id trong request")
            return JsonResponse({'error': 'Thi·∫øu question_id'}, status=400)

        try:
            answers = Answer.objects.filter(question_id=question_id).order_by('-created_at')
            print(f"‚úÖ T√¨m th·∫•y {answers.count()} c√¢u tr·∫£ l·ªùi cho question_id {question_id}")

            user = request.user if request.user.is_authenticated else None
            answer_list = []

            for ans in answers:
                print(f"\nüìå X·ª≠ l√Ω Answer ID: {ans.id}")
                try:
                    user_info = ans.user  # FK t·ªõi UserInformation
                    print(f"üîç user_info: {user_info}")

                    full_name = getattr(user_info, 'full_name', None)
                    username = None
                    if user_info.user_id:
                        auth_user = User.objects.filter(id=user_info.user_id).first()
                        if auth_user:
                            username = auth_user.username

                    print(f"üßæ full_name: {full_name}")
                    print(f"üßæ username: {username}")

                    username = username or full_name or "Ng∆∞·ªùi d√πng ·∫©n danh"
                except Exception as e:
                    print(f"‚ö†Ô∏è L·ªói khi l·∫•y th√¥ng tin ng∆∞·ªùi d√πng cho Answer ID {ans.id}: {e}")
                    username = "Ng∆∞·ªùi d√πng ·∫©n danh"

                # üî¢ T√≠nh t·ªïng s·ªë like v√† dislike
                likes = Vote.objects.filter(vote_for='answer', content_id=ans.id, vote_type='like').count()
                dislikes = Vote.objects.filter(vote_for='answer', content_id=ans.id, vote_type='dislike').count()
                total_votes = likes - dislikes  # ho·∫∑c b·∫°n c√≥ th·ªÉ truy·ªÅn c·∫£ 2 v·ªÅ ph√≠a frontend

                print(f"üëç Likes: {likes}, üëé Dislikes: {dislikes}, üìä TotalVotes: {total_votes}")

                # üë§ Ki·ªÉm tra user hi·ªán t·∫°i ƒë√£ vote g√¨ ch∆∞a (n·∫øu c√≥)
                user_vote = None
                if user:
                    vote = Vote.objects.filter(user=user, vote_for='answer', content_id=ans.id).first()
                    if vote:
                        user_vote = vote.vote_type
                print(f"üë§ userVote: {user_vote}")

                answer_data = {
                    'id': ans.id,
                    'username': username,
                    'content': ans.content,
                    'created_at': ans.created_at.strftime('%Y-%m-%d %H:%M:%S'),
                    'userVote': user_vote,
                    'totalVote': total_votes,
                    'like': likes,
                    'dislike': dislikes,
                    'user_id': user_info.user_id if user_info else None,
                }

                print(f"‚úÖ D·ªØ li·ªáu answer ƒë∆∞·ª£c append: {answer_data}")
                answer_list.append(answer_data)

            return JsonResponse(answer_list, safe=False, status=200)

        except Exception as e:
            print("‚ùå L·ªói khi l·∫•y danh s√°ch c√¢u tr·∫£ l·ªùi:", str(e))
            return JsonResponse({'error': 'Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu'}, status=500)
        
    def put(self, request, answer_id, *args, **kwargs):
        print(f"Received answer_id: {answer_id}")
        logger.info(f"Received PUT request with answer_id: {answer_id}")
        
        user, error_response = get_authenticated_user(request)
        if error_response:
            return error_response

        try:
            # Ki·ªÉm tra v√† ph√¢n t√≠ch d·ªØ li·ªáu t·ª´ request
            data = json.loads(request.body)
            content = data.get("content")

            if not content:
                return JsonResponse({"error": "N·ªôi dung c√¢u tr·∫£ l·ªùi kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!"}, status=400)

            try:
                # T√¨m c√¢u tr·∫£ l·ªùi b·∫±ng answer_id
                answer = Answer.objects.get(id=answer_id)
            except Answer.DoesNotExist:
                return JsonResponse({"error": "C√¢u tr·∫£ l·ªùi kh√¥ng t·ªìn t·∫°i!"}, status=404)

            # Ki·ªÉm tra quy·ªÅn s·ªü h·ªØu c√¢u tr·∫£ l·ªùi
            if answer.user.user_id != user.id:  # S·ª≠a ph·∫ßn n√†y ƒë·ªÉ so s√°nh user_id
                logger.info(f"User {user.id} tried to edit answer {answer_id} owned by {answer.user.user_id}")
                return JsonResponse({"error": "B·∫°n kh√¥ng c√≥ quy·ªÅn ch·ªânh s·ª≠a c√¢u tr·∫£ l·ªùi c·ªßa ng∆∞·ªùi kh√°c!"}, status=403)

            # C·∫≠p nh·∫≠t n·ªôi dung c√¢u tr·∫£ l·ªùi v√† th·ªùi gian t·∫°o
            answer.content = content
            answer.created_at = now()  # C·∫≠p nh·∫≠t th·ªùi gian
            answer.save()
            
            return JsonResponse({"message": "C·∫≠p nh·∫≠t c√¢u tr·∫£ l·ªùi th√†nh c√¥ng!"}, status=200)

        except json.JSONDecodeError as e:
            logger.error(f"JSON Decode Error: {str(e)}")
            return JsonResponse({"error": "D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá!"}, status=400)

        except Exception as e:
            # Ghi l·∫°i traceback chi ti·∫øt v·ªÅ l·ªói
            logger.error(f"Unexpected error: {str(e)}")
            logger.error(f"Traceback: {traceback.format_exc()}")  # Ghi l·∫°i traceback chi ti·∫øt c·ªßa l·ªói

            return JsonResponse({"error": "ƒê√£ x·∫£y ra l·ªói khi c·∫≠p nh·∫≠t c√¢u tr·∫£ l·ªùi."}, status=500)