"""
Django settings for backend project.
 
Generated by 'django-admin startproject' using Django 5.1.7.
 
For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/
 
For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""
 
from pathlib import Path
from datetime import timedelta
import os
import socket
 
# ✅ Lấy IP nội bộ (trong cùng mạng LAN)
try:
    hostname = socket.gethostname()
    SERVER_LOCAL_IP = socket.gethostbyname(hostname)
except:
    SERVER_LOCAL_IP = "127.0.0.1"  # fallback nếu không xác định được
 
# ✅ Địa chỉ đầy đủ có thể dùng để frontend gọi API
LOCAL_SERVER_URL = f"http://{SERVER_LOCAL_IP}:8000"
BACKEND_API_BASE_URL = LOCAL_SERVER_URL  # Biến toàn cục cho backend và frontend dùng
 
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
 
 
# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/
 
# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-q64b+7)6ovbpg-o_m@twp@y4fpawv-*)i((kew&l^c%*5&c%n#'
 
# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True
 
ALLOWED_HOSTS = ["*"]
 
 
# Application definition
 
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'api',
    "corsheaders",
    'django_extensions',
    "rest_framework_simplejwt",
]
 
 
MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]
 
CORS_ALLOW_ALL_ORIGINS = True
 
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",
]
 
CSRF_TRUSTED_ORIGINS = [
    "http://localhost:3000",
]
 
ROOT_URLCONF = 'backend.urls'
 
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]
 
WSGI_APPLICATION = 'backend.wsgi.application'
 
 
# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases
 
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'webstudy_db_info',
        'USER': 'root',
        'PASSWORD': 'dotrungquan183@',
        'HOST': 'localhost',
        'PORT': '3306',
        'OPTIONS': {
            'charset': 'utf8mb4'
        }
    }
}
 
 
# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators
 
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]
 
 
# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/
 
LANGUAGE_CODE = 'en-us'
 
TIME_ZONE = 'Asia/Ho_Chi_Minh'  # Dùng múi giờ Việt Nam
 
USE_I18N = True
 
USE_TZ = False
 
 
# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/
 
STATIC_URL = 'static/'
 
# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field
 
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
 
REST_FRAMEWORK = {
    'DEFAULT_RENDERER_CLASSES': (
        'rest_framework.renderers.JSONRenderer',  # Chỉ hiển thị JSON, không hiển thị HTML
    ),
    'DEFAULT_PARSER_CLASSES': (
        'rest_framework.parsers.JSONParser',
        'rest_framework.parsers.FormParser',
        'rest_framework.parsers.MultiPartParser',
    ),
    # Thêm xác thực
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.TokenAuthentication',
    ),
}
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = 'trungquan1832003@gmail.com'  # Email gửi
EMAIL_HOST_PASSWORD = 'nhvm fnlq nkhs ljsh'  # Mật khẩu ứng dụng
 
 
# Thêm đường dẫn lấy ảnh
MEDIA_URL = "/image/"
MEDIA_ROOT = BASE_DIR / "image"
 
 
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'INFO',
    },
}
 
# Tăng thời gian sống cho Token
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=60),  # Mặc định là 5 phút
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),
}
 
 
# ================== Tự động tạo file config frontend ===================
 
frontend_config_path = BASE_DIR.parent / 'frontend' / 'src' / 'config.js'
 
frontend_config_content = f"""
// Tự động tạo file config frontend
export const API_WIFI_URL = "{BACKEND_API_BASE_URL}";
"""
 
try:
    with open(frontend_config_path, 'w', encoding='utf-8') as f:
        f.write(frontend_config_content)
except Exception as e:
    print(f"Không thể tạo file frontend config: {e}")